<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | The UrBlog]]></title>
  <link href="http://jurberg.github.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://jurberg.github.com/"/>
  <updated>2013-04-10T21:42:53-05:00</updated>
  <id>http://jurberg.github.com/</id>
  <author>
    <name><![CDATA[John Urberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A simple JavaScript module library]]></title>
    <link href="http://jurberg.github.com/blog/2013/02/26/simple-define-js/"/>
    <updated>2013-02-26T21:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2013/02/26/simple-define-js</id>
    <content type="html"><![CDATA[<p>When developing JavaScript, I like to break my code into modules and define what modules the depend on.  <a href="http://requirejs.org/">Require.JS</a> is a great tool for this, but it also means bringing in module loading.  I'm on a project using <a href="http://grails.org/">Grails</a> that has a moderate amount of JavaScript.  Grails provides a resource plugin that handles bundling of resources.  I would still like to use the Require.JS style of defining modules and their dependencies while still loading scripts the normal way so Grails is happy.</p>


<p>I ended up creating <a href="https://github.com/jurberg/define.js">define.js</a>.  This libary provides a simple 'define' and 'require' method.  The 'define' uses the global object to hold the modules so they are also available in html handlers.  Using the global object as the module list also allows us to treat third party libraries such as jQuery as dependencies.</p>


<p>The following example creates a module that depends on the domain.person module, jQuery and the window object.  Since we are using the global to store modules, we can treat jQuery and window just like any other dependency we have defined.</p>


<script src="https://gist.github.com/jurberg/5044824.js"></script>


<p>Using the global object to hold modules also allows us to access them in html</p>


<script src="https://gist.github.com/jurberg/5044843.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running the Require.JS optimizer in a Grails build]]></title>
    <link href="http://jurberg.github.com/blog/2013/02/02/requirejs-in-grails-build/"/>
    <updated>2013-02-02T22:06:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2013/02/02/requirejs-in-grails-build</id>
    <content type="html"><![CDATA[<p>The <a href="http://grails.org/plugin/resources">Grails Resource Plugin</a> provides some dependency management for your JavaScript resources by allowing you to define modules of scripts, including their dependencies.  This works fine for applications with small numbers of JavaScript.  If you're writing an application with a large amount of JavaScript, having to keep those dependencies in sync in a separate Groovy config file can get difficult.  Enter <a href="http://requirejs.org/">Require.JS</a>.  Require.JS is an <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">Asynchronous Module Definition (AMD) API</a> for JavaScript.  It allows you to define modules in JavaScript, including what modules it depends on.  The module loader will then load the dependencies when needed.  This is easier to manage in a large JavaScript project since you define the dependencies in each JavaScript file.</p>


<p>Require.JS comes with an <a href="http://requirejs.org/docs/optimization.html">optimizer</a> that will crawl thru all your code, evaluate the dependencies, merge them into one file and minimize it.  The optimizer code is in a JavaScript file that can be run using <a href="http://nodejs.org/">Node.JS</a> or <a href="https://developer.mozilla.org/en-US/docs/Rhino">Rhino</a>.  We would like to run this as part of the Grails build during the war command.</p>


<p>The Grails war command will copy the resources for the war file into a staging directory.  Before the war file is built, we will get a "CreateWarStart" event which gets the war name and the staging directory.  This is where we can call the optimizer command. Following is an example that can be placed in our _Events.groovy script.   It assumes you've placed the Rhino js.jar and the Require.JS r.js optimizer script in the Scripts folder.</p>


<script src="https://gist.github.com/4699237.js"></script>


<p>We run the script using the Java command instead of ant.java to avoid any issues from code loaded by Grails.  The scripts are run from the project root, so we reference the js.jar and r.js files in the .\Scripts directory.  The JavaScript files will be copied to the stagingDir in the js folder.  We'll set the baseUrl to that directory and output the build file there also.  While the example does not show it, you can also pass removeCombined=true to remove the JavaScript files that were combined.</p>


<p>The final step is to update our GSP file so it uses the -build version of the main script.  Following is an example of the script line adds -build if we are running in a war</p>


<script src="https://gist.github.com/4699505.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a context-param to Grails]]></title>
    <link href="http://jurberg.github.com/blog/2013/01/23/add-a-context-param-to-grails/"/>
    <updated>2013-01-23T22:06:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2013/01/23/add-a-context-param-to-grails</id>
    <content type="html"><![CDATA[<p>With the recent <a href="https://www.aspectsecurity.com/uploads/downloads/2012/12/Remote-Code-with-Expression-Language-Injection.pdf">Spring vulnerability</a>, we thought it would be a good idea to disable EL in our Grails application.  To do this, we need to add a context-param to the beginning of the generated web.xml file.  Rather than using install-templates, I used the eventWebXmlEnd event to insert it.  XMLSlurper would have been nice, but it does not have a simple way to insert a node at the beginning.  So instead I used the XmlParser and came up with the following.</p>

<script src="https://gist.github.com/4617534.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails script to generate JAXB classes]]></title>
    <link href="http://jurberg.github.com/blog/2012/11/27/grails-script-to-generate-JAXB-classes/"/>
    <updated>2012-11-27T19:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2012/11/27/grails-script-to-generate-JAXB-classes</id>
    <content type="html"><![CDATA[<p>I think Groovy's <a href="http://groovy.codehaus.org/api/groovy/xml/MarkupBuilder.html">MarkupBuilder</a> is great and I use it often.  Sometimes though, I need to generate a complex XML document that conforms to an XSD.  MarkupBuilder often leads to markup and business logic being mixed together much like HTML and Java code gets mixed in complex JSP pages. In cases like this, I like to use JAXB instead.  I can generate classes from the XSD, load up an object model and let JAXB generate the markup.</p>


<p>It's fairly easy to create a script to handle generating the JAXB classes for you.  JAXB comes with a handy Ant task that takes your XSD and generates classes. The trick is passing the build classpath to the task.  There is a "grailsSettings" variable available in scripts that contains <a href="https://github.com/grails/grails-core/blob/master/grails-bootstrap/src/main/groovy/grails/util/BuildSettings.groovy">BuildSettings</a>.  We can get the list of build dependencies files from this class to generate the classpath.  Here is a simple example that takes the Microsoft <a href="http://msdn.microsoft.com/en-us/library/ms256485.aspx">books.xsd</a> in the etc/schema directory and generates the code to the src/java directory:</p>


<script src="https://gist.github.com/4158702.js"> </script>


<p>UPDATE: Sometimes having the JAXB jars on your path can cause problems with your application.  In those cases, you call the generation class directly:</p>


<script src="https://gist.github.com/4186366.js"> </script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting XML to Flat Files with Groovy]]></title>
    <link href="http://jurberg.github.com/blog/2012/11/11/convert-xml-to-flat-files-with-groovy/"/>
    <updated>2012-11-11T19:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2012/11/11/convert-xml-to-flat-files-with-groovy</id>
    <content type="html"><![CDATA[<p>When integrating systems, you often need to convert data from one format to another.  For example, you may receive data from a web service in XML and need to convert it to a flat file for a legacy system.  It's usually not as simple as just moving data from a tag to a column either.  There's often calculations and formatting required.  Most often the code has the work of parsing, converting and formatting all mixed together.  With a dynamic language like Groovy which has closures, we can abstract much of that work.  For our example, we'll take a subset of the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms762271(v=vs.85).aspx">Microsoft sample books.xml file</a>:</p>


<script src="https://gist.github.com/4056093.js"> </script>


<p>We would like to provided a mapping for each column that allows us to pull data out of the XML file and define the width of the column.  We'll keep it simple to start with by assuming a fixed width flat file with all columns left justified.  Following is a simple mapping using an array of maps:</p>


<script src="https://gist.github.com/4056280.js"> </script>


<p>Each closure should get a GPathResult to a "row" in the XML file.  The closure should return the text that should go in the column.  We'll need to supply the tag that identifies the tag in the XML file to pass to the closure.  Following is an example test using our books data:</p>


<script src="https://gist.github.com/4056102.js"> </script>


<p>The implementation is fairly simple.  We process each "tag" in the XML.  For each mapping, we set the delegate for the closure to a map with the tag name and the GPathResults for that tag.  The closure can then be executed to get the text for the column:</p>


<script src="https://gist.github.com/4056079.js"> </script>


<p>The above piece of code abstracts the processing into 8 lines of code.  It is a testament to the power of a dynamic language that provides closures.</p>

]]></content>
  </entry>
  
</feed>
