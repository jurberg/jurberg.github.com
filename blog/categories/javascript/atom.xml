<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | The UrBlog]]></title>
  <link href="http://jurberg.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://jurberg.github.com/"/>
  <updated>2015-02-28T13:57:12-06:00</updated>
  <id>http://jurberg.github.com/</id>
  <author>
    <name><![CDATA[John Urberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ECMAScript 6 in Grails]]></title>
    <link href="http://jurberg.github.com/blog/2015/02/28/es6-grails-plugin/"/>
    <updated>2015-02-28T21:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2015/02/28/es6-grails-plugin</id>
    <content type="html"><![CDATA[<p>I've been writing a lot of JavaScript lately.  I like to apply the same engineering principles to my JavaScript code that I apply to any other language so I break my code up into separate clases and modules, each in their own file.  If I'm writing code using <a href="http://nodejs.org/">Node</a>, I use <a href="http://browserify.org/">browserify</a> or <a href="http://requirejs.org/">RequireJS</a> to help manage this.  On <a href="https://grails.org/">Grails</a> projects I used the resource plugin in the past.  Lately I've started using the asset-pipeline plugin.</p>

<p>I also use JavaScript constructor functions often, especially when using <a href="https://angularjs.org/">AngularJS</a>.  While it's a bit clunky to code prototypes this way, browser VMs optimize for that pattern and Angular uses it often.</p>

<p>I've been interested in using ECMAScript 6.  I like how it simplifies creating prototypes (i.e. the class keyword) and the built in module support.  I found a tool called <a href="https://babeljs.io/">Babel</a> that translates ES6 to readable ES5 code that runs in the browser.  It's easy to plugin into browserify in a Node project.  I wanted to start using it in Grails so I created a new asset-pipeline plugin called <a href="https://grails.org/plugin/es6to5-asset-pipeline">es6to5-asset-pipeline</a>. (It's called es6to5 because when I started it, babel was called 6to5).</p>

<p>Usage is simple:</p>

<ol>
  <li>Include the asset-pipeline and es6to5-asset-pipeline plugins in your project</li>
  <li>Name your JavaScript files with the extension .es6</li>
</ol>


<p>The plugin will run each file thru babel, wrap the results in an IIFE and convert the CommonJS style requires and exports into something that will work in the browser.</p>

<p>One of the goals I was able to accomplish was reading the ES6 import lines to figure out what files to require before processing the current file.  The asset-pipeline needs the following at the top of your JavaScript file to tell it what files this file depends on:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require app/controller/homeCtrl.js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I was able to get my plugin to process the import statements; so instead of this ES6 code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require app/controller/homeCtrl.es6</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">HomeCtrl</span> <span class="nx">from</span> <span class="o">/</span><span class="nx">app</span><span class="o">/</span><span class="nx">controller</span><span class="o">/</span><span class="nx">HomeCtrl</span><span class="p">.</span><span class="nx">es6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can leave out the require and avoid the duplication:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">HomeCtrl</span> <span class="nx">from</span> <span class="o">/</span><span class="nx">app</span><span class="o">/</span><span class="nx">controller</span><span class="o">/</span><span class="nx">HomeCtrl</span><span class="p">.</span><span class="nx">es6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There is more documentation available on <a href="https://github.com/jurberg/es6to5-asset-pipeline/blob/master/README.md">github</a>.  Please give it a try and let me know what you think.  So far I've only used it on a few small personal projects so I'd love to get some folks testing it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular Routers in Large Projects]]></title>
    <link href="http://jurberg.github.com/blog/2015/01/25/angular-router/"/>
    <updated>2015-01-25T21:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2015/01/25/angular-router</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>If you read the <a href="https://docs.angularjs.org/tutorial/step_07">Angular Tutorial section on the router</a> you will find what amounts to a large switch statement.  Here's the example code from the tutoral:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">phonecatApp</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/phones&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/phone-list.html&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;PhoneListCtrl&#39;</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/phones/:phoneId&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/phone-detail.html&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;PhoneDetailCtrl&#39;</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/phones&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A diligent programmer might build a service around this to provide methods to switch routes or to provide constants for the routes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">PHONE_ROUTE</span>  <span class="o">=</span> <span class="s1">&#39;/phones&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// config routes (see previous example)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;RouteService&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$location</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">goToPhoneList</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">PHONE_ROUTE</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">goToPhoneDetails</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">phoneId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">PHONE_ROUTE</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">phoneId</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}(</span><span class="nx">phonecatApp</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is not a big deal for a small project with a couple of routes.  As your application grows, you'll find this file needs to be updated everytime a route is added.  These methods to navigate to a route will start to contain logic that should be in a controller.  Image what this file would look like with 30 routes?</p>

<p>Let's apply some Object oriented design to our problem.  One way to manage our dependencies is to use the <a href="http://en.wikipedia.org/wiki/Open/closed_principle">Open Closed Principle</a>; we want to make our RouterService open for extension but closed for modification.  The $routeProvider gives us some help here.  We don't need to add all our routes in one block of code.  Since routes tend to match up to controllers, why not add it in the code file with it's controller?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">PHONE_LIST_ROUTE</span> <span class="o">=</span> <span class="s1">&#39;/phones&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;PhoneListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// controller code here</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$routeProvider</span><span class="p">.</span>
</span><span class='line'>  <span class="nx">when</span><span class="p">(</span><span class="nx">PHONE_LIST_ROUTE</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/phone-list.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;PhoneListCtrl&#39;</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>  <span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">redirectTo</span><span class="o">:</span> <span class="nx">PHONE_LIST_ROUTE</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}(</span><span class="nx">phonecatApp</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We still have the issue of those methods on the RouterService itself. We should move those to the file with the controller.  This keeps the logic concerning what happens when you try to route to a controller together with the controller.  We can take advantage of that fact that JavaScript is a dynamic language by defining a simple service and adding methods on the fly.</p>

<p>First start with a simple service.  Notice it is just an empty object.  We'll extend it as we go.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="s1">&#39;RouterService&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="p">}(</span><span class="nx">phonecatApp</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now after we've setup our controller and $routeProvider, we can add the goto method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// controller def&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// route config&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;RouterService&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">RouterService</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Router</span><span class="p">.</span><span class="nx">goToPhoneList</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="nx">PHONE_LIST_ROUTE</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}]);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}(</span><span class="nx">phonecatApp</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using this pattern, I can now add or change code for routes in a single file.  The route details, the controller and a go to method are all together.  More importantly, multiple developers can now work on a large application with dozens of routes without constantly having conflicts on that RouterService.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototypal JavaScript]]></title>
    <link href="http://jurberg.github.com/blog/2014/07/12/javascript-prototype/"/>
    <updated>2014-07-12T21:00:00-05:00</updated>
    <id>http://jurberg.github.com/blog/2014/07/12/javascript-prototype</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>I was watching the <a href="https://frontendmasters.com/courses/advanced-javascript/">Advanced JavaScript course on Frontend Masters</a>
and Kyle brought up his concept of “OLOO” (objects-linked-to-other-object).  It reminded me of a blog post by Keith Peters
a few years back on <a href="http://www.adobe.com/devnet/html5/articles/javascript-object-creation.html">Learning to live without "new"</a>
where he explains using prototypal inheritance instead of constructor functions.  Both are examples pure prototypal coding.</p>

<h2>The Standard Way</h2>

<p>The way we were taught to create objects in JavaScript is to create a constructor function and add methods to the
function's prototype object.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Animal</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To create a sublcass, we create a new constructor function and set it's prototype to the parent prototype. To call the
parent constructor, we need to call it passing in this as the context object.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Animal</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class='line'><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;woof&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s2">&quot;Scamp&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; says &#39;</span> <span class="o">+</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">speak</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Prototypal Way</h2>

<p>If you've had any exposure to prototypal languages, the above example will look strange.  I've tried out the
<a href="http://iolanguage.org/">IO language</a> which is a prototype based language.  In a prototypal language, you create a
prototype by cloning Object and adding methods and properties to it.  You can then clone that prototype to create
instances to use or you can clone it to create a prototype that you can extend.  This is how the above example would look in IO:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="n">Animal</span> <span class="o">:=</span> <span class="nb">Object</span> <span class="k">clone</span>
</span><span class='line'><span class="n">Animal</span> <span class="n">getName</span> <span class="o">:=</span> <span class="k">method</span><span class="o">(</span><span class="n">name</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Dog</span> <span class="o">:=</span> <span class="n">Animal</span> <span class="k">clone</span>
</span><span class='line'><span class="n">Dog</span> <span class="n">speak</span> <span class="o">:=</span> <span class="k">method</span><span class="o">(</span><span class="s">&quot;woof&quot;</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dog</span> <span class="o">:=</span> <span class="n">Dog</span> <span class="k">clone</span>
</span><span class='line'><span class="n">dog</span> <span class="n">name</span> <span class="o">:=</span> <span class="s">&quot;Scamp&quot;</span>
</span><span class='line'><span class="n">writeln</span><span class="o">(</span><span class="n">dog</span> <span class="n">getName</span><span class="o">(),</span> <span class="s">&quot; says &quot;</span><span class="o">,</span> <span class="n">dog</span> <span class="n">speak</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Good News</h2>

<p>We can code this way in JavaScript!  The Object.create function is similar to IO's clone.  Here's
a pure prototypal implementation in JavaScript.  Other than syntax, it's the same as the IO version.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Animal</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">);</span>
</span><span class='line'><span class="nx">Animal</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Dog</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Animal</span><span class="p">);</span>
</span><span class='line'><span class="nx">Dog</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;woof&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
</span><span class='line'><span class="nx">dog</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Scamp&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; says &#39;</span> <span class="o">+</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">speak</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Bad News</h2>

<p>JavaScript engines have optimizations when you use constructor functions.  Testing the two
different options on <a href="http://jsperf.com/proto-vs-ctor/3">JSPerf</a> shows the prototypal implementation to be up to 90
times slower than using constuctors.</p>

<p><img src="/images/proto-vs-ctor.png" alt="Perf Graph" /></p>

<p>Also, if you are using frameworks such as <a href="https://angularjs.org/">Angular</a>, you have to use constructor functions when
you are creating controllers and services.</p>

<h2>Enter Classes</h2>

<p>With ES6 we have a new class syntax.  This syntax is just sugar for the standard constructor way to produce objects.
It looks like we are creating classes like one would in Java or C#, but it's still creating prototype objects under
the covers.  This will be confusing for people coming from class based languages as they will expect it to have the
same properties as a class in their language when it's really creating prototypes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">Dog</span> <span class="kr">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">super</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s2">&quot;woof&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s2">&quot;Scamp&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; says &#39;</span> <span class="o">+</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">speak</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusion</h2>

<p>If I had a choice, I would always write using a pure prototypal style.  It's more expressive, dynamic and fun.
Because of the way the way the virtual machines optimize for constructor functions and the way frameworks use them,
production code I write will still use constructor functions.  Once ES6 becomes common, I expect I'll be using
the class syntax instead as it's easier than using constructor functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Grails UI 'Components']]></title>
    <link href="http://jurberg.github.com/blog/2013/04/24/grails-components/"/>
    <updated>2013-04-24T21:00:00-05:00</updated>
    <id>http://jurberg.github.com/blog/2013/04/24/grails-components</id>
    <content type="html"><![CDATA[<p>I'm working on a Grails application with a large amount of JavaScript.  I often have UI 'components' that have markup, CSS and JavaScript associated with them that are used on several pages.  A couple of examples are shopping carts and dialogs.  I've found a good way to organize this code is to make use of the resources plugin to put the pieces together into modules that I can then place into the pages.  As an example, I made a simple dialog that has a GSP for the layout, a CSS file with some styling and JavaScript to open the dialog.  The first step is to create some markup for the dialog in a template:</p>


<script src="https://gist.github.com/jurberg/5457059.js"></script>


<p>I added a require at the top to pull in the module definition from the ApplicationResources file.  This will pull the CSS and JavaScript for the component in each page that uses the template.</p>


<p></p>

<script src="https://gist.github.com/jurberg/5457071.js"></script>


<p>A little CSS and JavaScript will bring the component to life:</p>


<script src="https://gist.github.com/jurberg/5457099.js"></script>


<script src="https://gist.github.com/jurberg/5457104.js"></script>


<p>I can now include the template on the page and all the pieces of my component are pulled in.  I can now open the dialog from my page.</p>


<script src="https://gist.github.com/jurberg/5457112.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roll Your Own Controllers with Express and Require.JS]]></title>
    <link href="http://jurberg.github.com/blog/2013/04/10/express-requirejs-controllers/"/>
    <updated>2013-04-10T21:00:00-05:00</updated>
    <id>http://jurberg.github.com/blog/2013/04/10/express-requirejs-controllers</id>
    <content type="html"><![CDATA[<p>I'm a Grails developer at work, so I've gotten used to convention over configuration for controllers.  I just create a class with a name that ends in Controller and place it the controller folder.  Each method in the controller is an action and it allows me to access that method via /controller/action/id.</p>




<p>While Node and Express have full blown Rails copies (such as <a href="http://geddyjs.org/">Geddy</a>), I want something simpler.  I prefer to use <a href="http://requirejs.org/">Require.JS</a> to help me manage my dependencies.  It includes a require method that allows me to load a module by name.</p>




<p>This gave me an idea.  What if I could make a /controller/acton/id route in Express and use require to dynamically load the controller.  I could then call the action on the controller as a key.  It turns out it's pretty simple:</a>
<script src="https://gist.github.com/jurberg/5360006.js"></script>

<p>Now any module in app/controller that has a method that takes a request and response can act as a controller with no configuration.  This example responds to /health/index.  Since we set it up to go to index when there's no action, it will also respond to /health.</p>
<script src="https://gist.github.com/anonymous/99f7c50f17734aa0fb8a.js"></script>

<p>There are cases where your URL does not match /controller/action.  Grails allows you to setup a UrlMapping file that maps URLs to controllers.  We could setup a similar file in JavaScript:</p>
<script src="https://gist.github.com/jurberg/ebba91d0bdf5dbc57fff.js"></script>

<p>We can then loop thru the mappings and register them with Express:</p>
<script src="https://gist.github.com/jurberg/5360024.js"></script>

<p>With just Express, Require.JS and a few lines of JavaScript, I now have convention over configuration controllers</p>

]]></content>
  </entry>
  
</feed>
