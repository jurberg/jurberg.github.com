<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The UrBlog]]></title>
  <link href="http://jurberg.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://jurberg.github.com/"/>
  <updated>2013-02-26T21:41:34-06:00</updated>
  <id>http://jurberg.github.com/</id>
  <author>
    <name><![CDATA[John Urberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Spring as a Factory Method]]></title>
    <link href="http://jurberg.github.com/blog/2011/11/11/spring-as-a-factory-method/"/>
    <updated>2011-11-11T19:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2011/11/11/spring-as-a-factory-method</id>
    <content type="html"><![CDATA[<p>One common strategy in object-oriented program is to use the <a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">dependency inversion principle</a> to decouple high level code from the low level details. To demonstrate this, let's use the movie example from <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672">Martin Fowler's Refactoring book</a>.</p>

<br/><br/>


<p>After some initial refactoring, we have a Movie class that can calculate it's charge based on days rented:</p>

<pre><span style="color:#000000;">// </span><span style="color:#b22222;">From book: 'Refactoring' by Martin Fowler
</span><span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">Movie</span> {

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">CHILDRENS</span> = 2;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">NEW_RELEASE</span> = 1;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">REGULAR</span> = 0;

   <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">double</span> result = 0;
      <span style="color:#a020f0;">switch</span> (getPriceCode()) {
    <span style="color:#a020f0;">case</span> <span style="color:#228b22;">Movie</span>.<span style="color:#228b22;">REGULAR</span>:
       result += 2;
       <span style="color:#a020f0;">if</span> (daysRented &gt; 2)
          result += (daysRented - 2) * 1.5;
       <span style="color:#a020f0;">break</span>;
    <span style="color:#a020f0;">case</span> <span style="color:#228b22;">Movie</span>.<span style="color:#228b22;">NEW_RELEASE</span>:
       result += daysRented * 3;
       <span style="color:#a020f0;">break</span>;
    <span style="color:#a020f0;">case</span> <span style="color:#228b22;">Movie</span>.<span style="color:#228b22;">CHILDRENS</span>:
       result += 1.5;
       <span style="color:#a020f0;">if</span> (daysRented &gt; 3)
          result += (daysRented - 3) * 1.5;
       <span style="color:#a020f0;">break</span>;
    }
    <span style="color:#a020f0;">return</span> result;
   }

}</pre>


<p>Next we replace the switch statement with polymorphism using the state pattern:</p>


<pre><span style="color:#000000;">// </span><span style="color:#b22222;">From book: 'Refactoring' by Martin Fowler
</span><span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">Movie</span> {

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">CHILDRENS</span> = 2;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">NEW_RELEASE</span> = 1;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">REGULAR</span> = 0;

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#228b22;">Price</span> newPrice(<span style="color:#a020f0;">int</span> priceCode) {
      <span style="color:#a020f0;">switch</span> (priceCode) {
         <span style="color:#a020f0;">case</span> <span style="color:#228b22;">REGULAR</span>:
        <span style="color:#a020f0;">return</span> <span style="color:#a020f0;">new</span> <span style="color:#228b22;">RegularPrice</span>();
     <span style="color:#a020f0;">case</span> <span style="color:#228b22;">NEW_RELEASE</span>:
        <span style="color:#a020f0;">return</span> <span style="color:#a020f0;">new</span> <span style="color:#228b22;">NewReleasePrice</span>();
     <span style="color:#a020f0;">case</span> <span style="color:#228b22;">CHILDRENS</span>:
        <span style="color:#a020f0;">return</span> <span style="color:#a020f0;">new</span> <span style="color:#228b22;">ChildrensPrice</span>();
     <span style="color:#a020f0;">default</span>:
        <span style="color:#a020f0;">throw</span> <span style="color:#a020f0;">new</span> <span style="color:#228b22;">IllegalArgumentException</span>();
    }
   }

   <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">return</span> newPrice(getPriceCode()).charge(daysRented);
   }

}

<span style="color:#a020f0;">public</span> <span style="color:#a020f0;">interface</span> <span style="color:#228b22;">Price</span> {
   <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented);
}

<span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">RegularPrice</span> <span style="color:#a020f0;">implements</span> <span style="color:#228b22;">Price</span> {
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">double</span> result = 2;
      <span style="color:#a020f0;">if</span> (daysRented &gt; 2)
         result += (daysRented - 2) * 1.5;
      <span style="color:#a020f0;">return</span> result;
   }
}

<span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">NewReleasePrice</span> <span style="color:#a020f0;">implements</span> <span style="color:#228b22;">Price</span> {
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">return</span> daysRented * 3;
   }
}

<span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">ChildrensPrice</span> <span style="color:#a020f0;">implements</span> <span style="color:#228b22;">Price</span> {
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">double</span> result = 1.5;
      <span style="color:#a020f0;">if</span> (daysRented &gt; 3)
         result += (daysRented - 3) * 1.5;
      <span style="color:#a020f0;">return</span> result;
   }
}</pre>


<p>This requires us to create some sort of factory method to decide which Price to create based on the Movie type (such as newPrice in the example).  Usually this occurs in a static method with a switch statement on type.  In a large program where Price is used multiple times, this is an advantage because we only have to change the one switch statement.  But what if we could get rid of that switch statement also?
<br/><br/>
If you are using Spring, you can take advantage of the replace-method tag.  You can pass it a class implementing MethodReplacer to replace a method in the class.  That method could be an abstract factory method.  Let's modify our Movie class so that newPrice is an abstract method:</p>


<pre><span style="color:#000000;">// </span><span style="color:#b22222;">From book: 'Refactoring' by Martin Fowler
</span><span style="color:#a020f0;">public</span> <span style="color:#a020f0;">abstract</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">Movie</span> {

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">CHILDRENS</span> = 2;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">NEW_RELEASE</span> = 1;
   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">static</span> <span style="color:#a020f0;">final</span> <span style="color:#a020f0;">int</span> <span style="color:#228b22;">REGULAR</span> = 0;

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">abstract</span> <span style="color:#228b22;">Price</span> newPrice(<span style="color:#a020f0;">int</span> priceCode);

   <span style="color:#a020f0;">double</span> charge(<span style="color:#a020f0;">int</span> daysRented) {
      <span style="color:#a020f0;">return</span> newPrice(getPriceCode()).charge(daysRented);
   }

}</pre>


<p>Now we create a handy method replacer utility class that joins a prefix with the first argument to create a bean name and looks up the bean in the context:</p>


<pre><span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">BeanFactoryMethodReplacer</span> <span style="color:#a020f0;">implements</span> <span style="color:#228b22;">MethodReplacer</span>, <span style="color:#228b22;">ApplicationContextAware</span> {

   <span style="color:#a020f0;">private</span> <span style="color:#228b22;">ApplicationContext</span> context;

   <span style="color:#a020f0;">private</span> <span style="color:#228b22;">String</span> prefix;

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">void</span> setApplicationContext(<span style="color:#228b22;">ApplicationContext</span> context) throws <span style="color:#228b22;">BeansException</span> {
      <span style="color:#a020f0;">this</span>.context = context;
   }

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">void</span> setPrefix(<span style="color:#228b22;">String</span> prefix) {
      <span style="color:#a020f0;">this</span>.prefix = prefix;
   }

   <span style="color:#a020f0;">public</span> <span style="color:#228b22;">Object</span> reimplement(<span style="color:#228b22;">Object</span> obj, <span style="color:#228b22;">Method</span> method, <span style="color:#228b22;">Object</span>[] args) throws <span style="color:#228b22;">Throwable</span> {
      <span style="color:#228b22;">String</span> bean = (prefix != null) ? prefix : <span style="color:#bc8f8f;">""</span>;
      bean += args[0];
      <span style="color:#a020f0;">return</span> context.getBean(bean);
   }

}</pre>


<p>Finally, we register the method replacer, the movie with the newPrice method replaced and beans for each Price.  We use "price" as a prefix.  The name of each price bean should be "price" + the number code for it's type:</p>


<pre>&lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"movie"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"Movie"</span>&gt;
   &lt;<span style="color:#0000ff;">replaced-method</span> <span style="color:#b8860b;">name</span>=<span style="color:#bc8f8f;">"newPrice"</span> <span style="color:#b8860b;">replacer</span>=<span style="color:#bc8f8f;">"factoryMethodReplacer"</span>&gt;
      &lt;<span style="color:#0000ff;">arg-type</span>&gt;int&lt;/<span style="color:#0000ff;">arg-type</span>&gt;
   &lt;/<span style="color:#0000ff;">replaced-method</span>&gt;
&lt;/<span style="color:#0000ff;">bean</span>&gt;

&lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"factoryMethodReplacer"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"BeanFactoryMethodReplacer"</span>&gt;
   &lt;<span style="color:#0000ff;">property</span> <span style="color:#b8860b;">name</span>=<span style="color:#bc8f8f;">"prefix"</span> <span style="color:#b8860b;">value</span>=<span style="color:#bc8f8f;">"price"</span>/&gt;
&lt;/<span style="color:#0000ff;">bean</span>&gt;

&lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"price0"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"RegularPrice"</span>/&gt;

&lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"price1"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"NewReleasePrice"</span>/&gt;

&lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"price2"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"ChildrensPrice"</span>/&gt;</pre>


<p>
Spring has now become our factory method.  As new price codes are added, we can just register the Price class as a bean without having to manually change a factory method.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Scheduling in Spring]]></title>
    <link href="http://jurberg.github.com/blog/2011/11/05/custom-scheduling-spring/"/>
    <updated>2011-11-05T19:00:00-05:00</updated>
    <id>http://jurberg.github.com/blog/2011/11/05/custom-scheduling-spring</id>
    <content type="html"><![CDATA[<p>Spring 3.0 has <a href="http://blog.springsource.com/2010/01/05/task-scheduling-simplifications-in-spring-3-0/">simplified task scheduling</a>.  As part if this, they have deprecated the MethodInvokingTimerTaskFactoryBean and ScheduledTimerTask.  Instead you create a scheduler that implements the TaskScheduler interface and uses a Trigger to specify when a task is scheduled to run.  The XML and annotations allow you to specify fixedDelay,  fixedRate or cron string.  These are fixed at run time.  This works great for triggers that are fixed at run time, but does not allow you any way to modify these at run time.  The TaskScheduler interface provides methods to schedule a task with a trigger, so this gives us an opportunity to pass in a custom trigger that can have it's trigger interval changed at run time.  There are a number of ways to configure this.  Here is a simple way I came up with that uses a single bean to schedule the task and change the fixedDelay at run time.  This extends the example provided on the Spring blog noted earlier.</p>

<br/><br/>


<p>First we need a class that takes the scheduler, task and starting delay.  For simplicity, it will also implement the Timer interface.</p>

<pre><span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">DynamicSchedule</span> <span style="color:#a020f0;">implements</span> <span style="color:#228b22;">Trigger</span> {

<span style="color:#a020f0;">   private</span> <span style="color:#228b22;">TaskScheduler</span> scheduler;
   <span style="color:#a020f0;">private</span> <span style="color:#228b22;">Runnable</span> task;
   <span style="color:#a020f0;">private</span> <span style="color:#228b22;">ScheduledFuture</span>&lt;?&gt; future;
   <span style="color:#a020f0;">private</span> <span style="color:#a020f0;">int</span> delay;

   <span style="color:#a020f0;">public</span> <span style="color:#228b22;">DynamicSchedule</span>(<span style="color:#228b22;">TaskScheduler</span> scheduler, <span style="color:#228b22;">Runnable</span> task, <span style="color:#a020f0;">int</span> delay) {
      <span style="color:#a020f0;">this</span>.scheduler = scheduler;
      <span style="color:#a020f0;">this</span>.task = task;
      reset(delay);
   }

   <span style="color:#a020f0;">public</span> <span style="color:#a020f0;">void</span> reset(<span style="color:#a020f0;">int</span> delay) {
      <span style="color:#a020f0;">if</span> (future != null) {
         <span style="color:#228b22;">System</span>.out.println(<span style="color:#bc8f8f;">"Cancelling task..."</span>);
         future.cancel(<span style="color:#b8860b;">true</span>);
      }
      <span style="color:#a020f0;">this</span>.delay = delay;
      <span style="color:#228b22;">System</span>.out.println(<span style="color:#bc8f8f;">"Starting task..."</span>);
      future = scheduler.schedule(task, <span style="color:#a020f0;">this</span>);
   }

<span style="color:#b8860b;">   @Override</span>
   <span style="color:#a020f0;">public</span> <span style="color:#228b22;">Date</span> nextExecutionTime(<span style="color:#228b22;">TriggerContext</span> triggerContext) {
      <span style="color:#228b22;">Date</span> lastTime = triggerContext.lastActualExecutionTime();
      <span style="color:#228b22;">Date</span> nextExecutionTime = (lastTime == null)
         ? <span style="color:#a020f0;">new</span> <span style="color:#228b22;">Date</span>()
         : <span style="color:#a020f0;">new</span> <span style="color:#228b22;">Date</span>(lastTime.getTime() + delay);
         System.out.println("DynamicSchedule -- delay: " + delay +
              ", lastActualExecutionTime: " + lastTime +
              "; nextExecutionTime: " + nextExecutionTime);
      return nextExecutionTime;
   }

}</pre>


<p>Note the reset method which stops the scheduled task, changes the delay and then restarts the task.  If you are changing the delay to a shorter delay, you want to restart with the new delay so it happens immediately.  Alternately, you can skip canceling the task and the new delay is picked up on the next execution.
<br/><br/>
The rest of the code is the same, except for the SchedulerProcessor which has the @Scheduled annotation removed from the process method:<p><pre><span style="color:#b8860b;">@Component</span><span style="color:#a020f0;">
public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">ScheduledProcessor</span> {

<span style="color:#a020f0;">   private</span> <span style="color:#a020f0;">final</span> <span style="color:#228b22;">AtomicInteger</span> counter = <span style="color:#a020f0;">new</span> <span style="color:#228b22;">AtomicInteger</span>();

<span style="color:#b8860b;">   @Autowired
   </span><span style="color:#a020f0;">private</span> <span style="color:#228b22;">Worker</span> worker;

<span style="color:#a020f0;">   public</span> <span style="color:#a020f0;">void</span> process() {<span style="color:#228b22;">
      System</span>.out.println(<span style="color:#bc8f8f;">"processing next 10 at "</span> + <span style="color:#a020f0;">new</span> <span style="color:#228b22;">Date</span>());
      <span style="color:#a020f0;">for</span> (<span style="color:#a020f0;">int</span> i = 0; i &lt; 10; i++) {
         worker.work(counter.incrementAndGet());
      }
   }

}</pre><p>In the XML configuration, we add a name to the scheduler and create the DynamicSchedule. We pass it the scheduler, the process method (wrapped in a MethodInvokingRunnable) and the default delay:</p><pre>   &lt;<span style="color:#000000;">context</span>:<span style="color:#0000ff;">component-scan</span> <span style="color:#b8860b;">base-package</span>=<span style="color:#bc8f8f;">"com/test"</span> /&gt;

   &lt;<span style="color:#000000;">task</span>:<span style="color:#0000ff;">annotation-driven</span> /&gt;

   &lt;<span style="color:#000000;">task</span>:<span style="color:#0000ff;">scheduler</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"scheduler"</span> /&gt;

   &lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">id</span>=<span style="color:#bc8f8f;">"dynamicSchedule"</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"com.test.DynamicSchedule"</span>&gt;
      &lt;<span style="color:#0000ff;">constructor-arg</span> <span style="color:#b8860b;">ref</span>=<span style="color:#bc8f8f;">"scheduler"</span> /&gt;
      &lt;<span style="color:#0000ff;">constructor-arg</span>&gt;
         &lt;<span style="color:#0000ff;">bean</span> <span style="color:#b8860b;">class</span>=<span style="color:#bc8f8f;">"org.springframework.scheduling.support.MethodInvokingRunnable"</span>&gt;
            &lt;<span style="color:#0000ff;">property</span> <span style="color:#b8860b;">name</span>=<span style="color:#bc8f8f;">"targetObject"</span> <span style="color:#b8860b;">ref</span>=<span style="color:#bc8f8f;">"scheduledProcessor"</span> /&gt;
            &lt;<span style="color:#0000ff;">property</span> <span style="color:#b8860b;">name</span>=<span style="color:#bc8f8f;">"targetMethod"</span> <span style="color:#b8860b;">value</span>=<span style="color:#bc8f8f;">"process"</span> /&gt;
         &lt;/<span style="color:#0000ff;">bean</span>&gt;
      &lt;/<span style="color:#0000ff;">constructor-arg</span>&gt;
      &lt;<span style="color:#0000ff;">constructor-arg</span> <span style="color:#b8860b;">value</span>=<span style="color:#bc8f8f;">"3000"</span> /&gt;
   &lt;/<span style="color:#0000ff;">bean</span>&gt;</pre><p>Now we can add a separate process that changes the delay to a random delay to test it out:</p><pre><span style="color:#b8860b;">@Component</span>
<span style="color:#a020f0;">public</span> <span style="color:#a020f0;">class</span> <span style="color:#228b22;">ScheduleChanger</span> {

<span style="color:#b8860b;">   @Autowired</span>
<span style="color:#a020f0;">   private</span> <span style="color:#228b22;">DynamicSchedule</span> dynamicSchedule;

<span style="color:#b8860b;">   @Scheduled</span>(fixedDelay=30000)
<span style="color:#a020f0;">   public</span> <span style="color:#a020f0;">void</span> change() {
<span style="color:#228b22;">      Random</span> rnd = <span style="color:#a020f0;">new</span> <span style="color:#228b22;">Random</span>();
      <span style="color:#a020f0;">int</span> nextTimeout = rnd.nextInt(30000);
<span style="color:#228b22;">      System</span>.out.println(<span style="color:#bc8f8f;">"Changing poll time to: "</span> + nextTimeout);
      dynamicSchedule.reset(nextTimeout);
   }

}</pre><p>When you run this and view the output, you will see where the dynamic schedule trigger is fired and where the schedule gets changed.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing REST Authentication]]></title>
    <link href="http://jurberg.github.com/blog/2011/06/16/implementing-rest-authentication/"/>
    <updated>2011-06-16T19:00:00-05:00</updated>
    <id>http://jurberg.github.com/blog/2011/06/16/implementing-rest-authentication</id>
    <content type="html"><![CDATA[<p>While there is not much written about REST authentication, there does seem to be a common theme among the few articles written about it that REST services should be authenticated by signing the query parameters using a private key and making the calls over HTTPS.  This posting will provide an example of the signing of query parameters using a simple Spring server. We'll provide a small twist by putting the authentication information in headers.</p>

<p><a href="http://www.objectpartners.com/2011/06/16/implementing-rest-authentication/">more...</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosting a Maven internal repository on a file share]]></title>
    <link href="http://jurberg.github.com/blog/2011/02/17/hosting-maven-repo-file-share/"/>
    <updated>2011-02-17T19:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2011/02/17/hosting-maven-repo-file-share</id>
    <content type="html"><![CDATA[<p>I spent some time today setting up an internal repository for my Maven build.  I wanted to host just the artifacts that are used by my projects and not allow the project build to go outside of that repository.  I first setup my repositories like this:</p>


<pre>
&lt;<span style="color:#0000ff">repositories</span>a&gt;
  &lt;<span style="color:#0000ff">repository</span>&gt;
    &lt;<span style="color:#0000ff">id</span>&gt;central&lt;/<span style="color:#0000ff">id</span>&gt;
    &lt;<span style="color:#0000ff">name</span>&gt;My Company's Internal Repository&lt;/<span style="color:#0000ff">name</span>&gt;
    &lt;<span style="color:#0000ff">url</span>&gt;file:///server/Maven/repo/&lt;/<span style="color:#0000ff">url</span>&gt;
  &lt;/<span style="color:#0000ff">repository</span>&gt;
&lt;/<span style="color:#0000ff">repositories</span>&gt;
</pre>


<p>The idea behind this setup is that I overrode the "central" repository and pointed it to my internal repository.  This way Maven would not try to go out to repo1.maven.org if it did not find something.</p>


<p>And it did not work.  After much research and trying many things, it turns out my URL needs to look like this:</p>


<pre>
&lt;<span style="color:#0000ff">url</span>&gt;file://\\server\Maven\repo\&lt;/<span style="color:#0000ff">url</span>&gt;
</pre>


<p>Hope this helps someone in the future trying to setup a repository on a share.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a HostnameVerifier with Spring Web Services]]></title>
    <link href="http://jurberg.github.com/blog/2010/12/17/spring-host-name-verifier/"/>
    <updated>2010-12-17T19:00:00-06:00</updated>
    <id>http://jurberg.github.com/blog/2010/12/17/spring-host-name-verifier</id>
    <content type="html"><![CDATA[<p>I was working with a web service from a site that uses SSL with a certificate that was self-signed.  When attempting to make the calls, I received the error:</p>


<pre>
    javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No name matching {web address} found
</pre>


<p>The workaround for this issue is to provide a HostnameVerifer that skips the host name verification process.  There is an example of how to do this <a href="http://www.jroller.com/hasant/entry/no_subject_alternative_names_matching">here.</a></p>


<p>I ran into this issue after I had a nice clean codebase using Spring's WebServiceTemplate and RestTemplate.  It took some digging, but I was able to find the spots where I had to install the verifier.  We start with a NullHostnameVerifier that returns true for everything:</p>


<pre>
<span style="color:#a020f0">public</span> <span style="color:#a020f0">class</span> <span style="color:#228b22">NullHostnameVerifier</span> <span style="color:#a020f0">implements</span> <span style="color:#228b22">HostnameVerifier</span> {
   <span style="color:#a020f0">public</span> <span style="color:#a020f0">boolean</span> verify(<span style="color:#228b22">String</span> hostname, <span style="color:#228b22">SSLSession</span> session) {
      <span style="color:#a020f0">return</span> <span style="color:#b8860b">true</span>;
   }
}
</pre>


<p>The <b>org.springframework.ws.client.core.WebServiceTempate</b> extends <b>org.springframework.ws.client.support.WebServiceAccesor</b> which uses a <b>org.springframework.ws.client.support.WebServiceMessageSender</b>.  The WebServiceMessage sender for HTTPS is <b>org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender</b> which is found in the spring-ws-support-1.5.9.jar. We need to create one of these and set the HostnameVerifier into it and pass it along to the WebServicesTemplate:</p>


<pre>
<span style="color:#a020f0">public</span> <span style="color:#a020f0">void</span> setWebServicesTempalate(<span style="color:#228b22">WebServicesTemplate</span> template) {
   <span style="color:#228b22">HostnameVerifier</span> verifier = <span style="color:#a020f0">new</span> <span style="color:#228b22">NullHostnameVerifier</span>();
   <span style="color:#228b22">HttpsUrlConnectionMessageSender</span> sender = <span style="color:#a020f0">new</span> <span style="color:#228b22">HttpsUrlConnectionMessageSender</span>();
   sender.setHostnameVerifier(verifier);
   template.setMessageSender(sender);
   <span style="color:#a020f0">this</span>.template = template;
}
</pre>


<p>The <b>org.springframework.web.client.RestTemplate</b> is setup differently.  It uses a <b>org.springframework.http.client.ClientHttpRequestFactory</b> to handle the connections.  Stepping thru the code, I found the RestTemplate using <b>org.springframework.http.client.SimpleClientHttpRequestFactory</b> which has a protected prepareConnection(...) method I could override and catch the HttpsURLConnection which I could set the verifier in.  First we need  our own ClientHttpRequestFactory:</p>


<pre> 
<span style="color:#a020f0">public</span> <span style="color:#a020f0">class</span> <span style="color:#228b22">MySimpleClientHttpRequestFactory</span> <span style="color:#a020f0">extends</span> <span style="color:#228b22">SimpleClientHttpRequestFactory</span> {

   <span style="color:#a020f0">private</span> <span style="color:#a020f0">final</span> <span style="color:#228b22">HostnameVerifier</span> verifier;

   <span style="color:#a020f0">public</span> <span style="color:#228b22">MySimpleClientHttpRequestFactory</span>(<span style="color:#228b22">HostnameVerifier</span> verifier) {
      <span style="color:#a020f0">this</span>.verifier = verifier;
   }

   <span style="color:#b8860b">@Override</span>
   <span style="color:#a020f0">protected</span> <span style="color:#a020f0">void</span> prepareConnection(<span style="color:#228b22">HttpURLConnection</span> connection, <span style="color:#228b22">String</span> httpMethod) throws <span style="color:#228b22">IOException</span> {
      <span style="color:#a020f0">if</span> (connection <span style="color:#a020f0">instanceof</span> <span style="color:#228b22">HttpsURLConnection</span>) {
         ((<span style="color:#228b22">HttpsURLConnection</span>) connection).setHostnameVerifier(verifier);
      }
      <span style="color:#a020f0">super</span>.prepareConnection(connection, httpMethod);
   }

}
</pre>


<p>Now we can use that as the request factory in our RestTemplate:</p>


<pre>
<span style="color:#a020f0">public</span> <span style="color:#a020f0">void</span> setRestTemplate(<span style="color:#228b22">RestTemplate</span> template) {
   <span style="color:#228b22">HostnameVerifier</span> verifier = <span style="color:#a020f0">new</span> <span style="color:#228b22">NullHostnameVerifier</span>();
   <span style="color:#228b22">MySimpleClientHttpRequestFactory</span> factory = <span style="color:#a020f0">new</span> <span style="color:#228b22">MySimpleClientHttpRequestFactory</span>(verifier);
   template.setRequestFactory(factory);
   <span style="color:#a020f0">this</span>.template = template;
}
</pre>


<p>Once the NullHostnameVerifer is in place in the WebServiceTemplate and the RestTemplate, we will no longer see the error</p>

]]></content>
  </entry>
  
</feed>
